{
	"info": {
		"_postman_id": "633e30ad-9c1b-4f3f-84f2-bfe843843473",
		"name": "HW_3 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Необходимо залогиниться\r",
									"// Приходящий токен необходимо передать во все остальные запросы. \r",
									"// Дальше все запросы требуют наличие токена.\r",
									"let json_resp = JSON.parse(pm.response.text());\r",
									"let get_token = json_resp.token;\r",
									"pm.environment.set(\"token\", get_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "LanaBri4",
									"type": "text"
								},
								{
									"key": "password",
									"value": "4irbanal",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}login",
							"host": [
								"{{url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200.\r",
									"pm.test(\"(/user_info) Status code is 200\", function () {\r",
									"\tpm.response.to.have.status(200);\r",
									"\t});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"let json_resp = JSON.parse(pm.response.text());\r",
									"let schema = pm.variables.get(\"schema\");\r",
									"\r",
									"try {\r",
									"    if (schema) {\r",
									"        if (json_resp) {\r",
									"            let Ajv = require('ajv'),\r",
									"            ajv = new Ajv({logger: console, allErrors: true});\r",
									"            pm.test(\"Schema is valid\" , function() {\r",
									"                let valid_json_resp = ajv.validate(schema, json_resp);\r",
									"                console.log(ajv.errors);\r",
									"                pm.expect(valid_json_resp, JSON.stringify(ajv.errors)).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"}\r",
									"catch(e) {\r",
									"    console.log(e);\r",
									"}\r",
									"//                                 или\r",
									"// pm.test('Schema is valid', function () {\r",
									"//     pm.expect(tv4.validate(json_resp, schema)).to.be.true;\r",
									"// });\r",
									"\r",
									"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"let salary_req = JSON.parse(request.data).salary;\r",
									"let u_salary_1_5_year_resp = json_resp.person.u_salary_1_5_year\r",
									"let start_qa_salary_resp = json_resp.start_qa_salary\r",
									"let qa_salary_after_6_months_resp = json_resp.qa_salary_after_6_months\r",
									"let qa_salary_after_12_months_resp = json_resp.qa_salary_after_12_months\r",
									"\r",
									"pm.test(\"(/user_info) salary_req * 2.9 equal qa_salary_after_12_months_resp\", function () {\r",
									"    pm.expect(salary_req * 2.9).to.eql(qa_salary_after_12_months_resp);\r",
									"});\r",
									"pm.test(\"(/user_info) salary_req * 2 equal qa_salary_after_6_months_resp\", function () {\r",
									"    pm.expect(salary_req * 2).to.eql(qa_salary_after_6_months_resp);\r",
									"});\r",
									"pm.test(\"(/user_info) salary_req * 4 equal u_salary_1_5_year_resp\", function () {\r",
									"    pm.expect(salary_req * 4).to.eql(u_salary_1_5_year_resp);\r",
									"});\r",
									"pm.test(\"(/user_info) salary_req equal start_qa_salary_resp\", function () {\r",
									"    pm.expect(salary_req).to.eql(start_qa_salary_resp);\r",
									"});\r",
									"\r",
									"// 4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"pm.environment.set(\"u_salary_1_5_year_val\", u_salary_1_5_year_resp);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"}\r",
									"pm.variables.set(\"schema\", schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 29,\r\n    \"salary\": 3000,\r\n    \"name\": \"Snow_White\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user_info",
							"host": [
								"{{url}}user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200.\r",
									"pm.test(\"(/get_test_user) Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"let json_resp = JSON.parse(pm.response.text());\r",
									"let schema = pm.variables.get(\"schema\");\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(json_resp, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3. Проверить что занчение поля name = значению переменной name из окружения\r",
									"pm.test(\"(/get_test_user) equal pm.environment.get('name') \", function () {\r",
									"    pm.expect(json_resp.name).to.eql(pm.environment.get('name'));\r",
									"});\r",
									"\r",
									"// 4. Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"pm.test(\"(/get_test_user) json_resp.age equal request.data.age \", function () {\r",
									"    pm.expect(json_resp.age).to.eql(request.data.age);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let schema = { \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"pm.variables.set(\"schema\", schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{u_salary_1_5_year_val}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}get_test_user",
							"host": [
								"{{url}}get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200.\r",
									"pm.test(\"(/new_data) Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"let json_resp = JSON.parse(pm.response.text());\r",
									"let schema = pm.variables.get(\"schema\");\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(json_resp, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"let salary_req = request.data.salary;\r",
									"let salary_resp = json_resp.salary[0];\r",
									"let salary_resp_1 = json_resp.salary[1];\r",
									"let salary_resp_2 = json_resp.salary[2];\r",
									"\r",
									"pm.test(\"(/new_data) salary_req equal salary_resp\", function () {\r",
									"    pm.expect(+ salary_req).to.eql(salary_resp);\r",
									"});\r",
									"pm.test(\"(/new_data) salary_req * 2 equal salary_resp_1\", function () {\r",
									"    pm.expect(salary_req * 2).to.eql(+ salary_resp_1);\r",
									"});\r",
									"pm.test(\"(/new_data) salary_req * 3 equal salary_resp_2\", function () {\r",
									"    pm.expect(salary_req * 3).to.eql(+ salary_resp_2);\r",
									"});\r",
									"\r",
									"// 4. Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test(\"test\", function () {\r",
									"    pm.expect(+ salary_resp_2).to.be.above(salary_resp)\r",
									"    pm.expect(+ salary_resp_2).to.be.above(+ salary_resp_1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let schema = {\r",
									" \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"pm.variables.set(\"schema\", schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "450",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Moana",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "/test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200.\r",
									"pm.test(\"(/test_pet_info) Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"let json_resp = JSON.parse(pm.response.text());\r",
									"let schema = pm.variables.get(\"schema\");\r",
									"pm.test('Schema is valid', function () {\r",
									"pm.expect(tv4.validate(json_resp, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3. В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"let json_req = request.data;\r",
									"let weight_req = json_req.weight;\r",
									"let daily_food_resp = json_resp.daily_food;\r",
									"let daily_sleep_resp = json_resp.daily_sleep;\r",
									"pm.test(\"(/test_pet_info) weight_req * 0.012 equal daily_food_resp\", function (){\r",
									"pm.expect(weight_req * 0.012).to.eql(daily_food_resp);\r",
									"});\r",
									"pm.test(\"(/test_pet_info) weight_req * 2.5 equal daily_sleep_resp\", function () {\r",
									"pm.expect(weight_req * 2.5).to.eql(daily_sleep_resp);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"}\r",
									"pm.variables.set(\"schema\", schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "41",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "62",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Goofy",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}test_pet_info",
							"host": [
								"{{url}}test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Можете взять любой объект из присланного списка, используйте js random.\r",
									"// \tВ объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
									"let json_resp = pm.response.json();\r",
									"for(let i = 0; i < json_resp.length; i++) {\r",
									"    let stringReq = {\r",
									"        url: 'http://162.55.220.72:5005/curr_byn',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'multipart/form-data'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'auth_token', value: pm.environment.get(\"token\")},\r",
									"                {key: 'curr_code', value: json_resp[i].Cur_ID}\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(stringReq, (err, res) => {\r",
									"       if (res.code === 200 && res.json().Cur_OfficialRate != undefined) {\r",
									"            pm.environment.set('curr_byn', res.json().Cur_ID);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}currency",
							"host": [
								"{{url}}currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "/curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200.\r",
									"pm.test(\"(/curr_byn) Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"let json_resp = JSON.parse(pm.response.text());\r",
									"let schema = pm.variables.get(\"schema\");\r",
									"pm.test('Schema is valid', function () {\r",
									"pm.expect(tv4.validate(json_resp, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"}\r",
									"pm.variables.set(\"schema\", schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{curr_byn}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}curr_byn",
							"host": [
								"{{url}}curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
